[user]
	name = Rui Pinheiro
[diff]
  tool = vimdiff
[difftool]
  prompt = false
#[rerere]
#  enabled = true
[merge]
  conflictstyle = diff3
[core]
  excludesfile = ~/.gitignore
  preloadindex = true
  autocrlf = input
  whitespace = blank-at-eol,space-before-tab,-blank-at-eof
  splitIndex = true # Helps with large indexes by splitting the index file

  # The untracked cache makes git status operations on large repos much faster
  # Some file systems do not support it (it relies on directory mtime) so we should not enable it by default
  # Test support by using "git update-index --test-untracked-cache"
  # If the test passes, enable it for the current repo with "git update-index --untracked-cache"
  untrackedCache = keep
[push]
  recurseSubmodules = check
  default = upstream # 'git push' by default to tracking branch
[pull]
  ff = only
[status]
  submodulesummary = 1
[fetch]
  prune = 1

[alias]
  # Simple aliases
  a = add
  aa = add -A

  d = diff
  cp = cherry-pick
  cl = clone
  co = checkout
  b = branch
  rb = rebase

  reseth = reset --hard
  rst = reset
  rsth = reset --hard

  s = status -s
  statustr = status --untracked-files=no
  str = !git s --untracked-files no

  sl = stash list
  sa = stash apply
  ss = stash save

  cm = commit -m
  ci = commit
  ca = commit --amend

  unstage = reset HEAD --
  cbranch = checkout -b
  squash = merge --squash
  squash-merge = !git squash

  ff-merge = merge --ff-only
  ff = !git ff-merge

  f = fetch
  fetch-all = fetch --all
  fa = !git fetch-all

  ##############
  # Current revision
  rev = rev-parse --verify --short HEAD

  ##############
  # Last commit shortcuts
  last = log -1 HEAD --decorate
  l = !git last

  dlast = diff --cached HEAD^
  dl = !git dlast

  ###################
  # Listing

  # List commits showing changed files
  list = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --first-parent --decorate --stat
  ll = !git list

  # Short list
  le = log --first-parent --oneline --decorate

  # List commits in short form, with colors and branch/tag annotations
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --first-parent --decorate

  # List one-line commits with dates
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --first-parent --decorate --date=short

  # List one-line commits with relative dates
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --first-parent --decorate --date=relative

  # history / graph view
  history = log --graph --full-history --topo-order --all --color --date=short --pretty=format:\"%Cred%h %Creset%ad%C(cyan)%d %Creset %s %C(bold)(%an)%Creset\"
  hist = !git history
  h = !git history
  graph = !git history

  lhistory =  "!f() { git log --glob=\"*"${1-$(git rev-parse --abbrev-ref HEAD)}"\" --topo-order --graph --color --date=short --pretty=format:\"%Cred%h %Creset%ad%C(cyan)%d %Creset %s %C(bold)(%an)%Creset\" "${@:2}"; }; f"
  lhist = !git lhistory
  lh = !git lhistory

  # List branches (verbose)
  lb = branch -vv

  # List commits not in upstream
  lpush = !git graph @{upstream}..HEAD
  lp = !git lpush

  # Diff against upstream
  dpush = diff @{upstream}..HEAD
  dp = !git dpush

  # List all changes to a file
  file = log -u
  f = !git file

  ###################
  # Specific commit shortcuts
  diffc  = "!f() { git diff "$1"^.."$1"; }; f"
  dc = !git diffc

  listc  = "!f() { git ll "$1"^.."$1"; }; f"
  lc  = !git listc

  ##################
  # Search
  grep = grep -Ii

  ##################
  # Gerrit
  publish = !sh -c 'git push origin HEAD:refs/for/${1-$(git rev-parse --abbrev-ref HEAD)} ' -
  draft   = !sh -c 'git push origin HEAD:refs/for/${1-$(git rev-parse --abbrev-ref HEAD)}%wip ' -
  wip     = !git draft

  ##################
  # Aliases
  # Better: zsh "git_aliases" helper
  alias = "!git config -l | grep alias | cut -c 7-"

  ##################
  # Branches

  # Delete a branch and recreate it from master â€” useful if you have, say,
  # a development branch and a master branch and they could conceivably go
  # out of sync
  recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" }; f"

  # Delete any branches that have been merged into master
  delete-merged-branches = "!git checkout master && git branch --no-color --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  ##################
  # Directory traversal

  # Go to git root
  root = rev-parse --show-toplevel
