[user]
  name = Rui Pinheiro
[diff]
  tool = vimdiff
[difftool]
  prompt = false
#[rerere]
#  enabled = true
[merge]
  conflictstyle = diff3
[core]
  excludesfile = ~/.gitignore
  preloadindex = true
  autocrlf = input
[push]
  recurseSubmodules = check
[pull]
  ff = only
[status]
  submodulesummary = 1

[alias]
  # Simple aliases
  a = add
  aa = add -A

  d = diff
  cp = cherry-pick
  cl = clone
  co = checkout
  b = branch
  rst = reset
  rb = rebase

  s = status -s
  st = !git s

  sl = stash list
  sa = stash apply
  ss = stash save

  ci = commit
  ca = commit --amend

  unstage = reset HEAD --
  cbranch = checkout -b
  squash = merge --squash
  squash-merge = !git squash

  ff-merge = merge --ff-only
  ff = !git ff-merge

  f = fetch
  fetch-all = fetch --all
  fa = !git fetch-all

  ##############
  # Current revision
  rev = rev-parse --verify --short HEAD

  ##############
  # Last commit shortcuts
  last = log -1 HEAD --decorate
  l = !git last

  dlast = diff --cached HEAD^
  dl = !git dlast

  ###################
  # Listing

  # List commits showing changed files
  list = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --stat
  ll = !git list

  # Short list
  le = log --oneline --decorate

  # List commits in short form, with colors and branch/tag annotations
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

  # List one-line commits with dates
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short

  # List one-line commits with relative dates
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

  # history / graph view
  history = log --graph --full-history --all --color --date=short --pretty=format:\"%Cred%h %Creset%ad%C(cyan)%d %Creset %s %C(bold)(%an)%Creset\"
  hist = !git history
  h = !git history
  graph = !git history

  localHistory =  !sh -c 'git log --glob="*`git rev-parse --abbrev-ref HEAD`" --graph --color --date=short --pretty=format:\"%Cred%h %Creset%ad%C(cyan)%d %Creset %s %C(bold)(%an)%Creset\"'
  lhist = !git localHistory
  lh = !git localHistory

  # List branches (verbose)
  lb = branch -vv

  # List commits not in upstream
  lpush = !git graph @{upstream}..HEAD
  lp = !git lpush

  # Diff against upstream
  dpush = diff @{upstream}..HEAD
  dp = !git dpush

  # List all changes to a file
  file = log -u
  f = !git file

  ###################
  # Specific commit shortcuts
  diffc  = "!f() { git diff "$1"^.."$1"; }; f"
  dc = !git diffc

  listc  = "!f() { git ll "$1"^.."$1"; }; f"
  lc  = !git listc

  ##################
  # Search
  grep = grep -Ii

  ##################
  # Gerrit
  publish = !sh -c 'git push origin HEAD:refs/for/${1-$(git rev-parse --abbrev-ref HEAD)} ' -
  draft   = !sh -c 'git push origin HEAD:refs/drafts/${1-$(git rev-parse --abbrev-ref HEAD)} ' -

  ##################
  # Aliases
  # Better: zsh "git_aliases" helper
  alias = "!git config -l | grep alias | cut -c 7-"

  ##################
  # Branches

  # Delete a branch and recreate it from master â€” useful if you have, say,
  # a development branch and a master branch and they could conceivably go
  # out of sync
  recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" }; f"

  # Delete any branches that have been merged into master
  delete-merged-branches = "!git checkout master && git branch --no-color --merged | grep -v '\\*' | xargs -n 1 git branch -d"
