[user]
  # Default author name
  name = Rui Pinheiro

[core]
  # Set a local excludes file
  excludesfile = ~/.gitignore
  # Preload the index in parallel
  preloadindex = true
  # Helps with large indexes by splitting the index file
  splitIndex = true
  # Don't perform any output conversion with regards to CR/LF
  autocrlf = input
  # Warn on specific whitespace issues
  whitespace = blank-at-eol,space-before-tab,-blank-at-eof
  # The untracked cache makes git status operations on large repos much faster
  # Some file systems do not support it (it relies on directory mtime) so we should not enable it by default
  # Test support by using "git update-index --test-untracked-cache"
  # If the test passes, enable it for the current repo with "git update-index --untracked-cache"
  untrackedCache = keep

[diff]
  # Use vimdiff for diffs
  tool = vimdiff
  # Use a better diff algorithm
  algorithm = histogram

[difftool]
  # Do not ask which difftoll to use
  prompt = false

[rerere]
  # Do not enable rerere (Reuse Recorded Resolution)
  enabled = false

[merge]
  # Set default conflict style
  conflictstyle = diff3

[push]
  # Block pushes if submodules are not present on the remote
  #recurseSubmodules = check
  # 'git push' by default to tracking branch
  default = upstream

[pull]
  # Do not automatically rebase when doing 'git pull', only allow fast-forward rebases
  ff = only

[status]
  # Submarize the submodule status when doing 'git status'
  submodulesummary = 1

[fetch]
  # Automatically prune stale remote branches on fetch
  prune = 1

[alias]
  # Simple aliases
  a = add
  aa = add -A

  d = diff
  cp = cherry-pick
  cl = clone
  co = checkout
  b = branch

  rb = rebase
  rebaseu = rebase @{u}
  rbu = rebase @{u}
  rebasea = rebase --abort
  rba = rebase --abort
  rebasec = rebase --continue
  rbc = rebase --continue
  rebasei = rebase -i
  rbi = rebase -i
  rebaseiu = rebase -i @{u}
  rbiu = rebase -i @{u}

  rst     = reset
  reseth  = reset --hard
  rsth    = reset --hard
  resetu  = reset @{u}
  rstu    = reset @{u}
  resethu = reset --hard @{u}
  rsthu   = reset --hard @{u}

  s = status -s
  statustr = status --untracked-files=no
  str = !git s --untracked-files no

  sl = stash list
  sa = stash apply
  ss = stash save

  cm = commit -m
  ci = commit
  ca = commit --amend

  unstage = reset HEAD --
  cbranch = checkout -b
  squash = merge --squash
  squash-merge = !git squash

  ff-merge = merge --ff-only
  ff = !git ff-merge

  f = fetch
  fetch-all = fetch --all
  fa = !git fetch-all

  ##############
  # Current revision
  rev = rev-parse --verify --short HEAD

  ##############
  # Last commit shortcuts
  last = log -1 HEAD --decorate
  l = !git last

  dlast = diff --cached HEAD^
  dl = !git dlast

  ###################
  # Listing

  # List commits showing changed files
  list = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --first-parent --decorate --stat
  ll = !git list

  # Short list
  le = log --first-parent --oneline --decorate

  # List commits in short form, with colors and branch/tag annotations
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --first-parent --decorate

  # List one-line commits with dates
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --first-parent --decorate --date=short

  # List one-line commits with relative dates
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --first-parent --decorate --date=relative

  # history / graph view
  history = log --graph --full-history --topo-order --all --color --date=short --pretty=format:\"%Cred%h %Creset%ad%C(cyan)%d %Creset %s %C(bold)(%an)%Creset\"
  hist = !git history
  h = !git history
  graph = !git history

  lhistory =  "!f() { git log --glob=\"*"${1-$(git rev-parse --abbrev-ref HEAD)}"\" --topo-order --graph --color --date=short --pretty=format:\"%Cred%h %Creset%ad%C(cyan)%d %Creset %s %C(bold)(%an)%Creset\" "${@:2}"; }; f"
  lhist = !git lhistory
  lh = !git lhistory

  # List branches (verbose)
  lb = branch -vv

  # List commits not in upstream
  lpush = !git graph @{upstream}..HEAD
  lp = !git lpush

  # Diff against upstream
  dpush = diff @{upstream}..HEAD
  dp = !git dpush

  # List all changes to a file
  file = log -u
  fdiff = !git file

  ###################
  # Specific commit shortcuts
  diffc  = "!f() { git diff "$1"^.."$1"; }; f"
  dc = !git diffc

  listc  = "!f() { git ll "$1"^.."$1"; }; f"
  lc  = !git listc

  ##################
  # Search
  grep = grep -Ii

  ##################
  # Gerrit
  get-upstream-branch = "!/bin/bash -c 'f(){                                        \
      BRANCH=\"$(git rev-parse --verify --abbrev-ref @{upstream} 2> /dev/null )\" ; \
      ORIGIN_BRANCH=\"${BRANCH#origin\\/}\" ;                                       \
      if [[ -z \"$BRANCH\" || \"$BRANCH\" == \"$ORIGIN_BRACH\" ]]; then             \
        echo \"$(git rev-parse --verify --abbrev-ref HEAD)\" ;                      \
        return 0 ;                                                                  \
      fi ;                                                                          \
      echo \"${ORIGIN_BRANCH}\" ;                                                   \
      return 0 ;                                                                    \
    };                                                                              \
    f'"
  publish = !sh -c 'git push origin HEAD:refs/for/${1-$(git get-upstream-branch)} ' -
  draft   = !sh -c 'git push origin HEAD:refs/for/${1-$(git get-upstream-branch)}%wip ' -
  wip     = !git draft

  ##################
  # Aliases
  # Better: zsh "git_aliases" helper
  alias = "!git config -l | grep alias | cut -c 7- | sort -u -k1 -t= | sed \"s/ \\+/ /g\""

  ##################
  # Branches

  # Delete a branch and recreate it from master â€” useful if you have, say,
  # a development branch and a master branch and they could conceivably go
  # out of sync
  recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" }; f"

  # Delete any branches that have been merged into master
  delete-merged-branches = "!git checkout master && git branch --no-color --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  ##################
  # Directory traversal

  # Go to git root
  root = rev-parse --show-toplevel
